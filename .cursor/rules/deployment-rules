# dataGPT - Regras de Deploy

## Pol√≠tica de Deploy

### Regra Principal
**TODOS os deploys devem ser realizados PRIMEIRO no ambiente de desenvolvimento. Deploy em produ√ß√£o APENAS quando solicitado explicitamente pelo usu√°rio.**

## Fluxo de Deploy Obrigat√≥rio

### 1. Deploy de Desenvolvimento (SEMPRE PRIMEIRO)
```bash
# Deploy autom√°tico para desenvolvimento
git push origin develop

# Ou deploy manual para desenvolvimento
vercel --target development
```

### 2. Deploy de Produ√ß√£o (APENAS QUANDO SOLICITADO)
```bash
# Deploy para produ√ß√£o - APENAS quando o usu√°rio solicitar
vercel --prod

# Ou merge para main quando solicitado
git checkout main
git merge develop
git push origin main
```

## Ambientes Configurados

### Desenvolvimento
- **Branch**: `develop`
- **URL**: `https://datagpt-develop.vercel.app`
- **Target**: `development`
- **Configura√ß√£o**: Vari√°veis de ambiente de desenvolvimento

### Produ√ß√£o
- **Branch**: `main`
- **URL**: `https://datagpt.vercel.app`
- **Target**: `production`
- **Configura√ß√£o**: Vari√°veis de ambiente de produ√ß√£o

## Regras de Deploy

### ‚úÖ Permitido SEMPRE
- Deploy para ambiente de desenvolvimento
- Push para branch `develop`
- Testes em ambiente de desenvolvimento
- Corre√ß√µes em ambiente de desenvolvimento

### ‚ùå Proibido SEM Solicita√ß√£o Expl√≠cita
- Deploy para produ√ß√£o
- Push para branch `main`
- Merge de `develop` para `main`
- Altera√ß√£o de vari√°veis de ambiente de produ√ß√£o

### üîí Deploy de Produ√ß√£o - Apenas Quando
- Usu√°rio solicitar explicitamente: "fa√ßa deploy para produ√ß√£o"
- Usu√°rio solicitar explicitamente: "deploy em prod"
- Usu√°rio solicitar explicitamente: "merge para main"
- Usu√°rio confirmar: "sim, pode fazer deploy em produ√ß√£o"

## Scripts de Deploy

### Deploy de Desenvolvimento (Autom√°tico)
```bash
#!/bin/bash
# deploy-dev.sh
echo "üöÄ Fazendo deploy para DESENVOLVIMENTO..."

# Verificar se est√° no branch develop
current_branch=$(git branch --show-current)
if [ "$current_branch" != "develop" ]; then
    echo "‚ùå Deploy de desenvolvimento deve ser feito no branch 'develop'"
    echo "üí° Execute: git checkout develop"
    exit 1
fi

# Deploy para desenvolvimento
vercel --target development --yes

echo "‚úÖ Deploy de desenvolvimento conclu√≠do!"
echo "üåê URL: https://datagpt-develop.vercel.app"
```

### Deploy de Produ√ß√£o (Apenas Quando Solicitado)
```bash
#!/bin/bash
# deploy-prod.sh
echo "üöÄ Fazendo deploy para PRODU√á√ÉO..."

# Confirmar se o usu√°rio realmente quer deploy em produ√ß√£o
read -p "‚ö†Ô∏è  Tem certeza que deseja fazer deploy em PRODU√á√ÉO? (digite 'SIM' para confirmar): " confirm
if [ "$confirm" != "SIM" ]; then
    echo "‚ùå Deploy de produ√ß√£o cancelado"
    exit 1
fi

# Verificar se est√° no branch main
current_branch=$(git branch --show-current)
if [ "$current_branch" != "main" ]; then
    echo "‚ùå Deploy de produ√ß√£o deve ser feito no branch 'main'"
    echo "üí° Execute: git checkout main"
    exit 1
fi

# Deploy para produ√ß√£o
vercel --prod --yes

echo "‚úÖ Deploy de produ√ß√£o conclu√≠do!"
echo "üåê URL: https://datagpt.vercel.app"
```

## Configura√ß√£o do Vercel

### vercel.json - Configura√ß√£o de Ambientes
```json
{
  "builds": [
    {
      "src": "api/index.py",
      "use": "@vercel/python"
    },
    {
      "src": "index.html",
      "use": "@vercel/static"
    }
  ],
  "routes": [
    {
      "src": "/api/(.*)",
      "dest": "/api/index.py"
    },
    {
      "src": "/(.*)",
      "dest": "/index.html"
    }
  ],
  "buildCommand": "pip install -r requirements.txt",
  "outputDirectory": ".",
  "regions": ["iad1"],
  "env": {
    "NODE_ENV": "development"
  }
}
```

### Vari√°veis de Ambiente por Ambiente

#### Desenvolvimento
```env
# .env.development
NODE_ENV=development
VERCEL_ENV=development
SUPABASE_URL=https://hwfnntgacsebqrprqzzm.supabase.co
SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
OPENAI_API_KEY=sk-proj-...
DEBUG=true
LOG_LEVEL=debug
```

#### Produ√ß√£o
```env
# .env.production
NODE_ENV=production
VERCEL_ENV=production
SUPABASE_URL=https://hwfnntgacsebqrprqzzm.supabase.co
SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
OPENAI_API_KEY=sk-proj-...
DEBUG=false
LOG_LEVEL=info
```

## Workflow de Desenvolvimento

### 1. Desenvolvimento de Nova Funcionalidade
```bash
# 1. Criar branch de feature
git checkout develop
git pull origin develop
git checkout -b feature/nova-funcionalidade

# 2. Desenvolver e testar
# ... c√≥digo ...

# 3. Commit e push para feature
git add .
git commit -m "feat: nova funcionalidade"
git push origin feature/nova-funcionalidade

# 4. Merge para develop (deploy autom√°tico)
git checkout develop
git merge feature/nova-funcionalidade
git push origin develop  # Deploy autom√°tico para desenvolvimento
```

### 2. Deploy para Produ√ß√£o (Apenas Quando Solicitado)
```bash
# 1. Usu√°rio solicita: "fa√ßa deploy para produ√ß√£o"
# 2. Verificar se develop est√° est√°vel
git checkout develop
git pull origin develop

# 3. Merge para main
git checkout main
git pull origin main
git merge develop
git push origin main  # Deploy autom√°tico para produ√ß√£o

# 4. Confirmar deploy
echo "‚úÖ Deploy de produ√ß√£o realizado com sucesso!"
```

## Monitoramento de Deploy

### Logs de Deploy
```python
# Adicionar logs espec√≠ficos para deploy
import logging

def log_deployment(environment: str, version: str, user: str = None):
    """Log de deploy para monitoramento"""
    logger.info(f"üöÄ Deploy realizado - Ambiente: {environment}, Vers√£o: {version}")
    
    if environment == "production":
        logger.warning(f"‚ö†Ô∏è  Deploy de PRODU√á√ÉO realizado por: {user or 'Sistema'}")
    
    # Salvar no Supabase se dispon√≠vel
    if supabase_client.is_connected():
        supabase_client.client.table("api_usage_logs").insert({
            "endpoint": "deploy",
            "method": "POST",
            "status_code": 200,
            "error_message": f"Deploy {environment} - {version}"
        }).execute()
```

### Verifica√ß√£o de Deploy
```python
def verify_deployment(environment: str) -> bool:
    """Verifica se o deploy foi bem-sucedido"""
    try:
        if environment == "development":
            url = "https://datagpt-develop.vercel.app/api/health"
        else:
            url = "https://datagpt.vercel.app/api/health"
        
        response = requests.get(url, timeout=30)
        return response.status_code == 200
        
    except Exception as e:
        logger.error(f"Erro ao verificar deploy {environment}: {e}")
        return False
```

## Checklist de Deploy

### Antes de Qualquer Deploy
- [ ] **C√≥digo testado** localmente
- [ ] **Testes unit√°rios** passando
- [ ] **CHANGELOG.md atualizado** com mudan√ßas
- [ ] **Documenta√ß√£o atualizada**
- [ ] **Vari√°veis de ambiente** configuradas
- [ ] **Branch correto** verificado

### Deploy de Desenvolvimento
- [ ] **Branch develop** ativo
- [ ] **C√≥digo commitado** e pushado
- [ ] **Deploy autom√°tico** executado
- [ ] **URL de desenvolvimento** verificada
- [ ] **Funcionalidades testadas** no ambiente de desenvolvimento

### Deploy de Produ√ß√£o (Apenas Quando Solicitado)
- [ ] **Solicita√ß√£o expl√≠cita** do usu√°rio
- [ ] **Confirma√ß√£o** do usu√°rio
- [ ] **Branch main** ativo
- [ ] **Merge de develop** para main
- [ ] **Deploy de produ√ß√£o** executado
- [ ] **URL de produ√ß√£o** verificada
- [ ] **Funcionalidades testadas** no ambiente de produ√ß√£o

## Comandos de Deploy

### Comandos Permitidos Sempre
```bash
# Deploy de desenvolvimento
git push origin develop
vercel --target development

# Verificar status
vercel ls
vercel logs
```

### Comandos que Requerem Solicita√ß√£o
```bash
# Deploy de produ√ß√£o - APENAS quando solicitado
vercel --prod
git push origin main
git merge develop
```

## Alertas e Notifica√ß√µes

### Deploy de Desenvolvimento
- ‚úÖ Log: "Deploy de desenvolvimento realizado"
- ‚úÖ Notifica√ß√£o: "Ambiente de desenvolvimento atualizado"

### Deploy de Produ√ß√£o
- ‚ö†Ô∏è Log: "ATEN√á√ÉO: Deploy de produ√ß√£o realizado"
- ‚ö†Ô∏è Notifica√ß√£o: "Ambiente de produ√ß√£o atualizado - verificar funcionamento"
- üìß Email: "Deploy de produ√ß√£o realizado em [timestamp]"

## Rollback

### Rollback de Desenvolvimento
```bash
# Rollback para vers√£o anterior em desenvolvimento
vercel rollback [deployment-url] --target development
```

### Rollback de Produ√ß√£o
```bash
# Rollback para vers√£o anterior em produ√ß√£o - APENAS quando solicitado
vercel rollback [deployment-url] --prod
```

## Resumo das Regras

### ‚úÖ SEMPRE Permitido
1. Deploy para desenvolvimento
2. Push para branch `develop`
3. Testes em ambiente de desenvolvimento
4. Corre√ß√µes em ambiente de desenvolvimento

### ‚ùå NUNCA Sem Solicita√ß√£o
1. Deploy para produ√ß√£o
2. Push para branch `main`
3. Merge de `develop` para `main`
4. Altera√ß√£o de configura√ß√µes de produ√ß√£o

### üîí Deploy de Produ√ß√£o - Apenas Quando
1. Usu√°rio solicitar explicitamente
2. Usu√°rio confirmar a solicita√ß√£o
3. Usu√°rio usar palavras-chave: "produ√ß√£o", "prod", "main"

---

**√öltima atualiza√ß√£o**: 27/10/2025  
**Vers√£o**: 1.0  
**Pol√≠tica**: Desenvolvimento primeiro, produ√ß√£o apenas quando solicitado
