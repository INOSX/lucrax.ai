# dataGPT v2.6 - Regras do Projeto

## 📋 Arquivos de Regras

Este diretório contém todas as regras e padrões para o desenvolvimento do projeto dataGPT v2.6.

### 📁 Estrutura das Regras

```
.cursor/rules/
├── rules                    # Regras gerais do projeto
├── code-standards          # Padrões de código Python
├── supabase-rules          # Regras específicas do Supabase
├── deployment-rules        # Regras de deploy e ambientes
└── README                  # Este arquivo
```

## 🎯 Regras Principais

### 1. **Deploy** (deployment-rules)
- **SEMPRE** deploy primeiro para desenvolvimento
- **NUNCA** deploy para produção sem solicitação explícita
- Usar branch `develop` para desenvolvimento
- Usar branch `main` apenas quando solicitado

### 2. **Código** (code-standards)
- Nomenclatura: PascalCase para classes, snake_case para funções
- Documentação obrigatória em todas as funções
- Tratamento de erros consistente
- Validação de entrada obrigatória

### 3. **Supabase** (supabase-rules)
- Projeto: `hwfnntgacsebqrprqzzm.supabase.co`
- Sempre verificar conexão antes de operações
- Validar dados antes de inserir
- Usar transações quando possível

### 4. **Projeto** (rules)
- Arquitetura modular
- Segurança em primeiro lugar
- Testes obrigatórios
- Documentação atualizada

## 🚀 Fluxo de Desenvolvimento

### 1. Desenvolvimento
```bash
# Sempre no branch develop
git checkout develop
git pull origin develop

# Desenvolver funcionalidade
# ... código ...

# Commit e push (deploy automático para desenvolvimento)
git add .
git commit -m "feat: nova funcionalidade"
git push origin develop
```

### 2. Produção (Apenas Quando Solicitado)
```bash
# Usuário deve solicitar explicitamente
# "faça deploy para produção" ou "deploy em prod"

git checkout main
git merge develop
git push origin main  # Deploy automático para produção
```

## 🔒 Segurança

### Chaves API
- Nunca commitar chaves reais
- Sempre usar variáveis de ambiente
- Validar presença antes de usar

### Validação
- URLs: Sempre validar formato
- Dados: Sanitizar entrada do usuário
- APIs: Verificar chaves e configurações

## 📊 Banco de Dados

### Projeto Supabase
- **ID**: `hwfnntgacsebqrprqzzm`
- **URL**: `https://hwfnntgacsebqrprqzzm.supabase.co`
- **Status**: ✅ Ativo e funcionando

### Tabelas
1. `data_sources` - Fontes de dados
2. `data_analyses` - Histórico de análises
3. `chart_configurations` - Configurações de gráficos
4. `user_sessions` - Sessões de usuários
5. `api_usage_logs` - Logs de uso
6. `imported_data` - Cache de dados

## 🧪 Testes

### Estrutura
```
tests/
├── test_app.py
├── test_data_loader.py
├── test_chart_generator.py
└── test_api_client.py
```

### Padrões
- Testes unitários para todas as funções
- Mocks para APIs externas
- Validação de entrada e saída

## 📝 Documentação

### Arquivos Principais
- `README.md` - Documentação principal
- `SUPABASE_INTEGRATION.md` - Integração Supabase
- `PROJECT_STATUS.md` - Status do projeto
- `VERCEL_DEPLOYMENT.md` - Deploy Vercel

### Padrões
- Seções claras com emojis
- Exemplos de código sempre incluídos
- Status atualizado regularmente

## ⚡ Performance

### Otimizações
- Cache de dados e tokens
- Lazy loading
- Timeouts configuráveis
- Retry logic para operações de rede

### Monitoramento
- Logs de todas as operações
- Métricas de performance
- Alertas para falhas

## 🚨 Troubleshooting

### Problemas Comuns
1. **Chaves API inválidas** → Verificar variáveis de ambiente
2. **URLs inválidas** → Validar formato do Google Sheets
3. **Timeout** → Ajustar configurações
4. **Erro de banco** → Verificar conexão Supabase

### Logs Importantes
- Erro de carregamento
- Falha de API
- Erro de banco
- Timeout de operações

## 📋 Checklist de Desenvolvimento

### Antes de Commitar
- [ ] Código testado localmente
- [ ] Documentação atualizada
- [ ] Tratamento de erros implementado
- [ ] Logs adicionados
- [ ] Validações incluídas

### Antes de Deploy
- [ ] Testes passando
- [ ] Variáveis de ambiente configuradas
- [ ] Documentação atualizada
- [ ] Performance verificada
- [ ] Segurança validada

## 🔄 Git e Versionamento

### Branches
- `main` - Produção (apenas quando solicitado)
- `develop` - Desenvolvimento (deploy automático)
- `feature/` - Novas funcionalidades
- `hotfix/` - Correções urgentes

### Commits
- Formato: `tipo: descrição breve`
- Tipos: `feat`, `fix`, `docs`, `style`, `refactor`, `test`

## 🌐 Deploy

### Desenvolvimento
- **Branch**: `develop`
- **URL**: `https://datagpt-develop.vercel.app`
- **Deploy**: Automático ao fazer push

### Produção
- **Branch**: `main`
- **URL**: `https://datagpt.vercel.app`
- **Deploy**: Apenas quando solicitado explicitamente

## 📞 Suporte

### Em Caso de Dúvidas
1. Consultar este arquivo README
2. Verificar regras específicas nos arquivos correspondentes
3. Verificar logs de erro
4. Consultar documentação do projeto

---

**Última atualização**: 27/10/2025  
**Versão**: 1.0  
**Mantenedor**: Equipe dataGPT
